# -*- mode: ruby -*-
# vi: set ft=ruby :


Vagrant.configure("2") do |config|

  $physical_interface = "ens18f1"

  $openstack_node_provisioning = <<-SCRIPT
apt-get update
apt-get -qy install python-pip
apt-get -qy install python-dev libffi-dev gcc libssl-dev python-selinux python-setuptools
pip install ansible 
cat << 'EOF' | sudo tee /etc/network/interfaces.d/60-neutron.cfg
auto enp0s9
iface enp0s9 inet manual
EOF
ifup enp0s9
mkdir -p /root/.ssh
cat /tmp/ssh_key.pub >> /root/.ssh/authorized_keys
  SCRIPT

  # a controler 
  config.vm.define "controller01" do |controller01|
    controller01.vm.box = "ubuntu/xenial64"

     controller01.vm.provider "virtualbox" do |v|
      v.name = "kolla-multinode-controller01"
      v.memory = 8192 
      v.cpus = 2
      v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
      v.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
    end

    controller01.vm.network "public_network", bridge: $physical_interface, ip: "192.168.50.76" 
    controller01.vm.network "public_network", bridge: $physical_interface, auto_config: false

    controller01.vm.provision "file", source: "ssh_key.pub", destination: "/tmp/ssh_key.pub"
    controller01.vm.provision "shell", inline: $openstack_node_provisioning

  end

  # a second controler
  config.vm.define "controller02" do |controller02|
    controller02.vm.box = "ubuntu/xenial64"

    controller02.vm.provider "virtualbox" do |v|
      v.name = "kolla-multinode-controller02"
      v.memory = 8192 
      v.cpus = 2
      v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
      v.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
    end

    controller02.vm.network "public_network", bridge: $physical_interface, ip: "192.168.50.77" 
    controller02.vm.network "public_network", bridge: $physical_interface, auto_config: false

    controller02.vm.provision "file", source: "ssh_key.pub", destination: "/tmp/ssh_key.pub"
    controller02.vm.provision "shell", inline: $openstack_node_provisioning

  end

  # a compute resource
  config.vm.define "compute01" do |compute01|
    compute01.vm.box = "ubuntu/xenial64"

    compute01.disksize.size = '120GB'
    compute01.vm.provider "virtualbox" do |v|
      v.name = "kolla-multinode-compute01"
      v.memory = 8192 
      v.cpus = 4
      v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
      v.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
    end

    compute01.vm.network "public_network", bridge: $physical_interface, ip: "192.168.50.78" 
    compute01.vm.network "public_network", bridge: $physical_interface, auto_config: false

    compute01.vm.provision "file", source: "ssh_key.pub", destination: "/tmp/ssh_key.pub"
    compute01.vm.provision "shell", inline: $openstack_node_provisioning

  end

  # a provisioner machine that will execute Kolla and pilot the deployment of Openstack
  config.vm.define "deploy" do |deploy|
    deploy.vm.box = "ubuntu/xenial64"

     deploy.vm.provider "virtualbox" do |v|
      v.name = "kolla-multinode-deploy"
      v.memory = 2048 
      v.cpus = 1
      v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"] 
    end

    deploy.vm.network "public_network", bridge: $physical_interface, ip: "192.168.50.75" 

    deploy.vm.provision "file", source: "ssh_key.pub", destination: "/tmp/ssh_key.pub"
    deploy.vm.provision "file", source: "ssh_key", destination: "/tmp/ssh_key"

    deploy.vm.provision "shell", inline: <<-SHELL
apt-get update
apt-get -qy install python-pip
apt-get -qy install python-dev libffi-dev gcc libssl-dev python-selinux python-setuptools
pip install ansible 
pip install kolla-ansible
mkdir /usr/local/etc/ansible
cat << 'EOF' | sudo tee /usr/local/etc/ansible/ansible.cfg
[defaults]
host_key_checking=False
pipelining=True
forks=100
EOF
echo "192.168.50.75 provision" >> /etc/hosts
echo "192.168.50.76 controller01" >> /etc/hosts
ssh-keyscan controller01 >> /root/.ssh/known_hosts
echo "192.168.50.77 controller02" >> /etc/hosts
ssh-keyscan controller02 >> /root/.ssh/known_hosts
echo "192.168.50.78 compute01" >> /etc/hosts
ssh-keyscan compute01 >> /root/.ssh/known_hosts
cp -r /usr/local/share/kolla-ansible/etc_examples/kolla /etc/ 
cp /usr/local/share/kolla-ansible/ansible/inventory/* /vagrant
sed -i s/'#openstack_release: ""'/'openstack_release: "rocky"'/g /etc/kolla/globals.yml
sed -i s/'kolla_internal_vip_address: "10.10.10.254"'/'kolla_internal_vip_address: "192.168.50.68"'/g /etc/kolla/globals.yml
sed -i s/'#network_interface: "eth0"'/'network_interface: "enp0s8"'/g /etc/kolla/globals.yml
#sed -i s/'#enable_haproxy: "yes"'/'enable_haproxy: "yes"'/g /etc/kolla/globals.yml
sed -i s/'#neutron_external_interface: "eth1"'/'neutron_external_interface: "enp0s9"'/g /etc/kolla/globals.yml
sed -i s/'#nova_compute_virt_type: "kvm"'/'nova_compute_virt_type: "qemu"'/g /etc/kolla/globals.yml
kolla-genpwd 
cp /etc/kolla/passwords.yml /vagrant/
mkdir -p /root/.ssh
mv /tmp/ssh_key /root/.ssh/id_rsa 
chmod go-rwx /root/.ssh/id_rsa
kolla-ansible -i /vagrant/3-nodes bootstrap-servers
kolla-ansible -i /vagrant/3-nodes prechecks
kolla-ansible -i /vagrant/3-nodes deploy
kolla-ansible -i /vagrant/3-nodes post-deploy
SHELL

# fixing vagrant local configuration; adding vagrant user to docker so that we can control containers
deploy.vm.provision "shell", inline: <<-SHELL
echo 'LC_ALL="en_US.UTF-8"'  >>  /etc/default/locale
echo 'LC_CTYPE="en_US.UTF-8"'  >>  /etc/default/locale
SHELL

# install client part of openstack, and run demo examples
deploy.vm.provision "shell", inline: <<-SHELL
pip install python-openstackclient
source /etc/kolla/admin-openrc.sh
sed -i s,"EXT_NET_CIDR='10.0.2.0/24'","EXT_NET_CIDR='192.168.50.0/24'",g  /usr/local/share/kolla-ansible/init-runonce
sed -i s/"EXT_NET_RANGE='start=10.0.2.150,end=10.0.2.199'"/"EXT_NET_RANGE='start=192.168.50.150,end=192.168.50.170'"/g /usr/local/share/kolla-ansible/init-runonce
sed -i s/"EXT_NET_GATEWAY='10.0.2.1'"/"EXT_NET_GATEWAY='192.168.50.253'"/g /usr/local/share/kolla-ansible/init-runonce
/usr/local/share/kolla-ansible/init-runonce
SHELL
  
deploy.vm.provision "shell", inline: <<-SHELL
source /etc/kolla/admin-openrc.sh
openstack project create --description 'Openstack Lab' lab --domain default
openstack user create --project lab --password labpassword labuser
openstack role add --user labuser --project lab admin
SHELL

  end

end
